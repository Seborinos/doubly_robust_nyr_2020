<!DOCTYPE html>
<html lang="" xml:lang="">
  <head>
    <title>Doubly Robust Estimation of Causal Effects in R</title>
    <meta charset="utf-8" />
    <meta name="author" content="Sebastian Teran Hidalgo" />
    <meta name="date" content="2020-08-14" />
    <link href="libs/remark-css/default.css" rel="stylesheet" />
    <link href="libs/remark-css/default-fonts.css" rel="stylesheet" />
  </head>
  <body>
    <textarea id="source">
class: center, middle, inverse, title-slide

# Doubly Robust Estimation of Causal Effects in R
### Sebastian Teran Hidalgo
### Vroom
### 2020-08-14

---





















---
# What is Causal Inference in Data Science?

--

- A/B tests are great at allowing us to reach causal claims

--

- Will A or B cause a *better* outcome? (i.e, will A cause a bigger client retention than B)

--

- Sometimes we have data on A and B but not generated through a random experiment

--

- Relying solely on this data won't allow you to make correct causal claims about A and B 

--

- We can use causal inference methods to try to estimate the causal effect of using A versus B even from a non random experiment

---
# What is this talk about?

--

- *Goal*: estimate a causal effect when you do not have data from a randomized experiment 

--

- *Strategy 1*: Re weighting each observation by the probability of receiving A or B so that the data approximates a randomized experiment 

--

- *Strategy 2*: Modelling the outcome directly with a linear regression

--

- *Combining Idea 1 and 2*: To form doubly robust estimator

---
# What is a causal effect?

**Conterfactual difference**: On average receiving treatment `\(A\)` compared to `\(B\)` will cause a difference in the outcome of `\(\delta\)`

`$$\delta = E[Y(A)] - E[Y(B)]$$`

where `\(Y(A)\)` is the outcome if treatment `\(A\)` had been received, and `\(Y(B)\)` is the outcome if treatment `\(B\)` had been received.

**Mean difference**: The average difference in outcomes between those receiving `\(A\)` and `\(B\)`

`$$E[Y|A] - E[Y|B]$$`

- In an A/B test we can estimate the causal effect `\(\delta\)` by a simple difference of means because of randomization

`$$E[Y|A] - E[Y|B] = E[Y(A)] - E[Y(B)]$$`

- In non randomized data this is not necessarily true

`$$E[Y|A] - E[Y|B] \neq E[Y(A)] - E[Y(B)]$$`

---
# A non randomized data simulation

--


```r
simu_observational_data &lt;- function(n_obs) {
  X_1    &lt;- rnorm(n_obs)
  X_2    &lt;- rnorm(n_obs)
  XB     &lt;- 0.25*X_1 + 0.25*X_2
  prob_A &lt;- exp(XB) / (1 + exp(XB)) # This is not an A/B test!
  A      &lt;- rbinom(n_obs, 1, prob_A) # This is not an A/B test!
  
  # The causal effect of receiving A is 10
  Y      &lt;- 100 + X_1 + X_2 + 10*A + rnorm(n_obs)  
  
  data.frame(var_1 = X_1, var_2 = X_2, treatment = A, outcome = Y)  
} 
```

--

- In this case `\(\delta = E[Y(A)] - E[Y(B)] = 10\)`

--

- Unlike a random experiment, the probability of receiving treatment *A* depends on *X_1* and *X_2*

--

- This makes it difficult to to estimate the causal effect

---
# A non randomized experiment

- How is is different from an experiment or A/B-test?


```r
# Replace this
prob_A &lt;- exp(XB) / (1 + exp(XB)) # This is not an A/B test!
A      &lt;- rbinom(n_obs, 1, prob_A) # This is not an A/B test!
# With this
A      &lt;- rbinom(n_obs, 1, 0.5) # This is an A/B =)
```

---
# Naive estimator

--

- Naive estimator is the difference between the mean of the treatment `\(A\)` and `\(B\)`

`$$\hat{\delta}_{Naive} = \frac{1}{n}\sum_{i=1}^{n}\Big[Y_{i}A_{i} - Y_{i}(1-A_{i})\Big]$$`

--

- We are trying to estimate this

`$$\delta = E[Y(A)] - E[Y(B)]$$`

--


```r
naive_estimator &lt;- function(data) {
  data %&gt;% 
    summarise(
      EYB_naive = mean(outcome*(1 - treatment)),
      EYA_naive = mean(outcome*treatment)
    ) %&gt;% 
    mutate(naive_estimator = EYB_naive- EYB_naive)
}
```



---
# Naive estimator fails in this case

--

- The difference of means does not capture exclusively the effect of *A* on the outcome but mixes in effects from other variables as well

&lt;img src="/Users/sebastianhidalgo/Google Drive/Presentations/doubly_robust_nyr_2020/presentation/pictures/mordor_effect.png" width="50%" style="display: block; margin: auto;" /&gt;

---
class: center

# Naive estimator fails in this case

![](doubly_robust_nyr_20200308_files/figure-html/unnamed-chunk-12-1.png)&lt;!-- --&gt;

---
# Strategy 1: Inverse Probability Weighting
## Intuition Behind it

--

- In an experiment the probability of receiving a treatment are always equal across all units (i.e., 50%)

--
 
- In the current case, the probability of receiving the treatment depends on variables that affect the outcome
 
--

- If we knew what this probabilities are we could reweight our sample such that the data would better match a randomized experiment

--

- In the reweighting scheme, units that were very likely to receive the treatment are weighted down and units that were very unlikely to receive the treatment are weighted up

---
# Strategy 1: Inverse Probability Weighting - Propensity Score

--

- How do we estimate these probabilities? 

--

- The propensity score is just a logistic regression of the probability of receiving the treatment

--


```r
prop_score_model &lt;- function(data) {
  glm(treatment ~ var_1 + var_2, data = data, family = 'binomial')
}
```

- It is just a fancy name for logistic regression to sound smart at conferences!

---
# Strategy 1: IPW Estimator

- Similar to a difference of means but weights each observation inversely proportional to its probability of receiving a treatment

`$$\hat{\delta}_{IPW} = \frac{1}{n}\sum_{i=1}^{n}\bigg[\frac{Y_{i}A_{i}}{\color{red}{\pi(X_{i})}} - \frac{Y_{i}(1-A_{i})}{\color{red}{1-\pi(X_{i})}}\bigg]$$`


```r
ipw_estimator &lt;- function(data, model) {
  data %&gt;% 
    mutate(
      prob = predict(model, newdata = data, type = 'response'),
    ) %&gt;% 
    summarise(
      EYB_ipw = mean(outcome*(1 - treatment) / (1 - prob)),
      EYA_ipw = mean(outcome*treatment / prob)
    ) %&gt;% 
    mutate(ipw = EYA_ipw - EYB_ipw)
}
```

---
class: center
# IPW Performance 

![](doubly_robust_nyr_20200308_files/figure-html/unnamed-chunk-15-1.png)&lt;!-- --&gt;


---
# IPW could fail


```r
prop_score_model &lt;- function(data) {
  # OOPS! I forgot var_2
  glm(treatment ~ var_1, data = data, family = 'binomial')
}
```

&lt;img src="/Users/sebastianhidalgo/Google Drive/Presentations/doubly_robust_nyr_2020/presentation/pictures/monkey_modeler.png" width="50%" style="display: block; margin: auto;" /&gt;


---
# Strategy 2: Model the Outcome

- Default strategy of data scientist would be to create a linear model

 `$$Y =\alpha_0 + \alpha_1 X_1 + \alpha_2 X_2 +\delta A+ \varepsilon$$` 

- Use `\(\hat{\delta}\)` as the estimator of the causal effect


```r
mean_outcome_model &lt;- function(data) {
  glm(outcome ~ var_1 + var_2 + treatment, data = data)
}
```


```r
outcome_model_estimator &lt;- function(data) {
   mean_model &lt;- mean_outcome_model(data)
   summary(mean_model)$coefficients['treatment', ][1]
}
```


---
class: center
# Strategy 2: Performance - Simulation

![](doubly_robust_nyr_20200308_files/figure-html/unnamed-chunk-20-1.png)&lt;!-- --&gt;

---
# Outcome model could also fail


```r
mean_outcome_model &lt;- function(data) {
  # HOW COULD I FORGOTTEN var_2??!?! I AM SO DUMB!
  glm(outcome ~ var_1 + treatment, data = data)
}
```

&lt;img src="/Users/sebastianhidalgo/Google Drive/Presentations/doubly_robust_nyr_2020/presentation/pictures/ai.png" width="40%" style="display: block; margin: auto;" /&gt;

---
# Combining Strategy 1 and 2

--

- If the propensity score model is incorrect, strategy 1 will not work

--

- If the outcome model is incorrect, strategy 2 will not work

--

- If you combine both approaches, you just need either one to work but not both

--

- As a data scientist you have 1 out of 2 chances to get the correct answer

--

- This is called the doubly robustness property

---
# This could also fail but is less likely to do so

&lt;img src="/Users/sebastianhidalgo/Google Drive/Presentations/doubly_robust_nyr_2020/presentation/pictures/predator.png" width="75%" style="display: block; margin: auto;" /&gt;

---
# Combining Strategy 1 and 2 - Doubly Robust Estimator

$$\hat{\delta}_{DR} = $$

`$$\frac{1}{n}\sum_{i=1}^{n}\bigg[\frac{Y_{i}A_{i} -\color{red}{(A_i-\pi(X_{i}))\mu(X_i, A_i)}}{\pi(X_{i})} - \frac{Y_{i}(1-A_{i}) -\color{red}{(A_i-\pi(X_{i}))\mu(X_i, A_i)}}{1-\pi(X_{i})}\bigg]$$`

where `$$\mu(X, A) = \hat{\alpha}_0 + \hat{\alpha}_1 X_1 + \hat{\alpha}_2 X_2 +\hat{\delta} A$$`

- The term in red is said to *augment* the IPW estimator

- It can be shown that this estimator will consistently estimate `\(\delta = E[Y(A)]-E[Y(B)]\)` as long as either `\(\pi(X_{i})\)` or `\(\mu(X, A)\)` are correct 

---
# Combining Strategy 1 and 2 - Doubly Robust Estimator


```r
dr_estimator &lt;- function(data, prop_model, mean_model) {
  data %&gt;% 
    mutate(
      prob = predict(prop_model, newdata = data, type = 'response'),
      pred = predict(mean_model, newdata = data, type = 'response'),
      augm = (treatment - prob)*pred
    ) %&gt;% 
    summarise(
      EYB_dr = mean((outcome*(1 - treatment) - augm) / (1 - prob)),
      EYA_dr = mean((outcome*treatment - augm) / prob)
    ) %&gt;% 
    mutate(dre = EYA_dr - EYB_dr)
}
```

---
class: center
# DRE Performance

![](doubly_robust_nyr_20200308_files/figure-html/unnamed-chunk-25-1.png)&lt;!-- --&gt;


---
# Doubly Robust Estimator - Propensity Score is Incorrect


```r
prop_score_model &lt;- function(data) {
  # OOPS! I forgot var_2
  glm(treatment ~ var_1, data = data, family = 'binomial')
}
```

---
class: center
# Doubly Robust Estimator - Propensity Score is Incorrect




&lt;img src="doubly_robust_nyr_20200308_files/figure-html/unnamed-chunk-28-1.png" width="60%" /&gt;

---
# Doubly Robust Estimator - Mean Model is Incorrect


```r
mean_outcome_model &lt;- function(data) {
  # HOW COULD I FORGOTTEN var_2??!?! I AM SO DUMB!
  glm(outcome ~ var_1 + treatment, data = data)
}
```

---
class: center
# Doubly Robust Estimator - Mean Model is Incorrect



&lt;img src="doubly_robust_nyr_20200308_files/figure-html/unnamed-chunk-31-1.png" width="60%" /&gt;

---
# Conclusion

- If you have non randomized data you cannot simply calculate the difference in means between `\(A\)`
 and `\(B\)` to estimate the causal effect
 
- You can use the IPW estimator based on a logistic regression of the probability of receiving the treatment

- You can model the outcome based on a linear regression with the confounding variables as well as `\(A\)`

- Or you can use the doubly robust estimator which will work as long as either the logistic or the linear regression are correct, but not both

---
# References

- Lunceford, Jared K., and Marie Davidian. "Stratification and weighting via the propensity score in estimation of causal treatment effects: a comparative study." Statistics in medicine 23.19 (2004): 2937-2960.

---
# Thank you

--

- Ludmila Janda

--

- Vroom data team
    </textarea>
<style data-target="print-only">@media screen {.remark-slide-container{display:block;}.remark-slide-scaler{box-shadow:none;}}</style>
<script src="https://remarkjs.com/downloads/remark-latest.min.js"></script>
<script>var slideshow = remark.create({
"highlightStyle": "github",
"highlightLines": true,
"countIncrementalSlides": false
});
if (window.HTMLWidgets) slideshow.on('afterShowSlide', function (slide) {
  window.dispatchEvent(new Event('resize'));
});
(function(d) {
  var s = d.createElement("style"), r = d.querySelector(".remark-slide-scaler");
  if (!r) return;
  s.type = "text/css"; s.innerHTML = "@page {size: " + r.style.width + " " + r.style.height +"; }";
  d.head.appendChild(s);
})(document);

(function(d) {
  var el = d.getElementsByClassName("remark-slides-area");
  if (!el) return;
  var slide, slides = slideshow.getSlides(), els = el[0].children;
  for (var i = 1; i < slides.length; i++) {
    slide = slides[i];
    if (slide.properties.continued === "true" || slide.properties.count === "false") {
      els[i - 1].className += ' has-continuation';
    }
  }
  var s = d.createElement("style");
  s.type = "text/css"; s.innerHTML = "@media print { .has-continuation { display: none; } }";
  d.head.appendChild(s);
})(document);
// delete the temporary CSS (for displaying all slides initially) when the user
// starts to view slides
(function() {
  var deleted = false;
  slideshow.on('beforeShowSlide', function(slide) {
    if (deleted) return;
    var sheets = document.styleSheets, node;
    for (var i = 0; i < sheets.length; i++) {
      node = sheets[i].ownerNode;
      if (node.dataset["target"] !== "print-only") continue;
      node.parentNode.removeChild(node);
    }
    deleted = true;
  });
})();
(function() {
  "use strict"
  // Replace <script> tags in slides area to make them executable
  var scripts = document.querySelectorAll(
    '.remark-slides-area .remark-slide-container script'
  );
  if (!scripts.length) return;
  for (var i = 0; i < scripts.length; i++) {
    var s = document.createElement('script');
    var code = document.createTextNode(scripts[i].textContent);
    s.appendChild(code);
    var scriptAttrs = scripts[i].attributes;
    for (var j = 0; j < scriptAttrs.length; j++) {
      s.setAttribute(scriptAttrs[j].name, scriptAttrs[j].value);
    }
    scripts[i].parentElement.replaceChild(s, scripts[i]);
  }
})();
(function() {
  var links = document.getElementsByTagName('a');
  for (var i = 0; i < links.length; i++) {
    if (/^(https?:)?\/\//.test(links[i].getAttribute('href'))) {
      links[i].target = '_blank';
    }
  }
})();
// adds .remark-code-has-line-highlighted class to <pre> parent elements
// of code chunks containing highlighted lines with class .remark-code-line-highlighted
(function(d) {
  const hlines = d.querySelectorAll('.remark-code-line-highlighted');
  const preParents = [];
  const findPreParent = function(line, p = 0) {
    if (p > 1) return null; // traverse up no further than grandparent
    const el = line.parentElement;
    return el.tagName === "PRE" ? el : findPreParent(el, ++p);
  };

  for (let line of hlines) {
    let pre = findPreParent(line);
    if (pre && !preParents.includes(pre)) preParents.push(pre);
  }
  preParents.forEach(p => p.classList.add("remark-code-has-line-highlighted"));
})(document);</script>

<script>
slideshow._releaseMath = function(el) {
  var i, text, code, codes = el.getElementsByTagName('code');
  for (i = 0; i < codes.length;) {
    code = codes[i];
    if (code.parentNode.tagName !== 'PRE' && code.childElementCount === 0) {
      text = code.textContent;
      if (/^\\\((.|\s)+\\\)$/.test(text) || /^\\\[(.|\s)+\\\]$/.test(text) ||
          /^\$\$(.|\s)+\$\$$/.test(text) ||
          /^\\begin\{([^}]+)\}(.|\s)+\\end\{[^}]+\}$/.test(text)) {
        code.outerHTML = code.innerHTML;  // remove <code></code>
        continue;
      }
    }
    i++;
  }
};
slideshow._releaseMath(document);
</script>
<!-- dynamically load mathjax for compatibility with self-contained -->
<script>
(function () {
  var script = document.createElement('script');
  script.type = 'text/javascript';
  script.src  = 'https://mathjax.rstudio.com/latest/MathJax.js?config=TeX-MML-AM_CHTML';
  if (location.protocol !== 'file:' && /^https?:/.test(script.src))
    script.src  = script.src.replace(/^https?:/, '');
  document.getElementsByTagName('head')[0].appendChild(script);
})();
</script>
  </body>
</html>
